import{_ as s,o as t,c as e,a as p}from"./app.c0e7208f.js";const a="/XinBlog/Images/https1.png",l="/XinBlog/Images/https2.png",C=JSON.parse('{"title":"HTTPS 详解","description":"","frontmatter":{},"headers":[{"level":2,"title":"HTTPS 实现原理","slug":"https-实现原理","link":"#https-实现原理","children":[]},{"level":2,"title":"TLS","slug":"tls","link":"#tls","children":[{"level":3,"title":"加密算法","slug":"加密算法","link":"#加密算法","children":[]},{"level":3,"title":"证书机制","slug":"证书机制","link":"#证书机制","children":[]}]},{"level":2,"title":"中间人攻击","slug":"中间人攻击","link":"#中间人攻击","children":[]}],"relativePath":"计算机网络/https.md","lastUpdated":1702994340000}'),n={name:"计算机网络/https.md"},o=p('<h1 id="https-详解" tabindex="-1">HTTPS 详解 <a class="header-anchor" href="#https-详解" aria-hidden="true">#</a></h1><p>我们在 http 历程篇说到以此<code>http://www.baidu.com/</code>为例子，其实我们在访问百度的时候，不管你输入的是 http 还是 https 协议都会被转成<code>https协议</code>。为什么大家都要使用 <code>https协议</code> ？ 大家都说 <code>https协议</code> 安全，这篇就可以知道为什么 https 安全</p><h2 id="https-实现原理" tabindex="-1">HTTPS 实现原理 <a class="header-anchor" href="#https-实现原理" aria-hidden="true">#</a></h2><p>大家可能都听说过 HTTPS 协议之所以是安全的是因为 HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现。但其实：HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。</p><p>HTTPS 的整体过程分为证书验证和数据传输阶段，具体的交互过程如下：</p><img src="'+a+`" style="zoom:50%;"><p><strong>① 证书验证阶段：</strong></p><p>1、浏览器发起 HTTPS 请求；<br> 2、服务端返回 HTTPS 证书；<br> 3、客户端验证证书是否合法，如果不合法则提示告警。</p><p><strong>② 数据传输阶段：</strong></p><p>1、当证书验证合法后，在本地生成随机数；<br> 2、通过公钥加密随机数，并把加密后的随机数传输到服务端；<br> 3、服务端通过私钥对随机数进行解密；<br> 4、服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输。</p><h2 id="tls" tabindex="-1">TLS <a class="header-anchor" href="#tls" aria-hidden="true">#</a></h2><p>刚开始听到 <code>TLS</code> 的时候，你可能还不太熟悉，但是说起 <code>SSL</code> 你可能就觉得好耳熟了。其实 <code>TLS</code> 就是从 <code>SSL</code> 发展而来的，只是 <code>SSL</code> 发展到 3.0 版本后改成了 <code>TLS</code>。</p><p>那么 TLS 协议有什么主要作用？</p><ul><li><p>首先就是 加密</p></li><li><p>其次就是 身份验证，也可以叫证书验证吧</p></li><li><p>最后就是 消息完整性校验（这是网络协议中常用的一个校验和机制，这里就不说了）</p></li></ul><h3 id="加密算法" tabindex="-1">加密算法 <a class="header-anchor" href="#加密算法" aria-hidden="true">#</a></h3><p><strong>对称加密</strong></p><p>对称加密算法是指加密和解密使用相同密钥的算法。常见的对称加密算法有 AES、DES、3DES、RC4、Blowfish、Twofish、CAST5、IDEA、RC2、SEED 等。</p><p><strong>非对称加密</strong></p><p>非对称加密算法是指加密和解密使用不同的密钥的算法。常见的非对称加密算法有 RSA、DSA、ECC、DH 等。</p><p>这里可能要提一下什么是对称加密和非对称加密： 一般的对称加密像这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">encrypt</span><span style="color:#A6ACCD;">(明文，秘钥) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 密文</span></span>
<span class="line"><span style="color:#82AAFF;">decrypt</span><span style="color:#A6ACCD;">(密文，秘钥) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 明文</span></span>
<span class="line"></span></code></pre></div><p>也就是说加密和解密用的是同一个秘钥。而非对称加密是这样的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">encrypt</span><span style="color:#A6ACCD;">(明文，公钥) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 密文</span></span>
<span class="line"><span style="color:#82AAFF;">decrypt</span><span style="color:#A6ACCD;">(密文，私钥) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 明文</span></span>
<span class="line"></span></code></pre></div><p>加密和解密是需要不同的秘钥的。 经过这几次握手成功后，客服端和服务端之间通信的加密算法和所需要的密钥也就确定下来了，之后双方的交互都可以使用对称加密算法加密了。</p><blockquote><p>很多人可能有疑问，为什么数据传输阶段的时候要用对称加密算法？</p></blockquote><p>非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的。 在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密。</p><h3 id="证书机制" tabindex="-1">证书机制 <a class="header-anchor" href="#证书机制" aria-hidden="true">#</a></h3><p>在 TLS 中，我们需要证书来保证你所访问的服务器是真实的，可信的。</p><p><strong>证书里面又点啥东西信息：</strong></p><ul><li>公钥</li><li>公司信息</li><li>证书签名算法</li><li>证书颁发机构</li><li>有效期</li><li>域名</li><li>指纹</li><li>等等.....</li></ul><p>浏览器发起 HTTPS 请求时，服务器会返回网站的 SSL 证书，浏览器验证证书的过程如下：</p><p>1、验证域名、有效期等信息是否正确：证书上都有包含这些信息，比较容易完成验证；</p><p>2、判断证书来源是否合法：每份签发证书都可以根据验证链查找到对应的根证书，操作系统、浏览器会在本地存储权威机构的根证书，利用本地根证书可以对对应机构签发证书完成来源验证</p><p>3、判断证书是否被篡改：需要与 CA 服务器进行校验；</p><p>4、判断证书是否已吊销：通过 CRL（Certificate Revocation List 证书注销列表）和 OCSP（Online Certificate Status Protocol 在线证书状态协议）实现，其中 OCSP 可用于第 3 步中以减少与 CA 服务器的交互，提高验证效率</p><p>满足以上 4 步，浏览器才会认定证书是可信的，然后继续进行后面的流程。</p><h2 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-hidden="true">#</a></h2><p>我们说了 SSL 证书，但是又为什么需要 SSL 证书，感觉又点怪麻烦的啊。其本意就是为了防范 <strong>中间人攻击</strong>。</p><p>TTP 协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器，而 HTTPS 协议主要解决的便是网络传输的安全性问题。首先我们假设不存在认证机构，任何人都可以制作证书，这带来的安全风险便是经典的“中间人攻击”问题。 凭下图理解：</p><img src="`+l+'" style="zoom:50%;"><blockquote><p>多余的阐述不再多说，可根据此图理解</p></blockquote>',41),c=[o];function i(r,d,h,S,T,g){return t(),e("div",null,c)}const u=s(n,[["render",i]]);export{C as __pageData,u as default};
