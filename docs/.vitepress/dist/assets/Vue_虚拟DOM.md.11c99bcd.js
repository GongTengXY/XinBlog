import{_ as s,o as n,c as a,a as l}from"./app.10d7898d.js";const o="/XinBlog/VNode1.png",p="/XinBlog/VNode2.png",m=JSON.parse('{"title":"虚拟 DOM","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是虚拟 DOM","slug":"什么是虚拟-dom","link":"#什么是虚拟-dom","children":[]},{"level":2,"title":"为什么要使用虚拟 DOM","slug":"为什么要使用虚拟-dom","link":"#为什么要使用虚拟-dom","children":[]},{"level":2,"title":"虚拟 DOM 怎样为转换真实 DOM","slug":"虚拟-dom-怎样为转换真实-dom","link":"#虚拟-dom-怎样为转换真实-dom","children":[]},{"level":2,"title":"模版和虚拟 dom 的关系","slug":"模版和虚拟-dom-的关系","link":"#模版和虚拟-dom-的关系","children":[{"level":3,"title":"获取模版","slug":"获取模版","link":"#获取模版","children":[]},{"level":3,"title":"编译模版","slug":"编译模版","link":"#编译模版","children":[]}]}],"relativePath":"Vue/虚拟DOM.md","lastUpdated":1702879062000}'),e={name:"Vue/虚拟DOM.md"},t=l('<h1 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-hidden="true">#</a></h1><h2 id="什么是虚拟-dom" tabindex="-1">什么是虚拟 DOM <a class="header-anchor" href="#什么是虚拟-dom" aria-hidden="true">#</a></h2><p>虚拟 DOM 是一种编程概念，其本质就是一个普通的 JavaScript 对象来描述一个 DOM 节点。因为不是真实的<code>DOM</code>对象，所以叫做<code>Virtual DOM(vNode)</code></p><p>我们为什么用虚拟<code>DOM</code>来模拟真实的<code>DOM</code>呢？</p><h2 id="为什么要使用虚拟-dom" tabindex="-1">为什么要使用虚拟 DOM <a class="header-anchor" href="#为什么要使用虚拟-dom" aria-hidden="true">#</a></h2><ul><li><p>手动操作<code>Dom</code>比较麻烦，还需要考虑浏览器兼容性问题，虽然有<code>Jquery</code>等库简化<code>DOM</code>操作，但是随着项目的复杂度越来越高，<code>DOM</code>操作复杂提升，既要考虑<code>Dom</code>操作，还要考虑数据的操作。</p></li><li><p>为了简化<code>DOM</code>的复杂操作于是出现了各种的<code>MVVM</code>框架，<code>MVVM</code>框架解决了视图和状态的同步问题，也就是当数据发生变化，更新视图，当视图发生变化更新数据。</p></li><li><p>为了简化视图的操作我们可以使用模板引擎，但是模板引擎没有解决跟踪状态变化的问题（当数据发生了变化后，无法获取上一次的状态，只有将页面上的元素删除，然后在重新创建，这时页面有刷新的问题，同时频繁操作<code>Dom</code>,性能也会非常低），于是<code>Virtual Dom</code>出现了。</p></li><li><p><code>Virtual Dom</code>的好处就是当状态改变时不需要立即更新<code>DOM</code>，只需要创建一个虚拟树来描述<code>DOM</code>，<code>Virtual Dom</code>内部将弄清楚如何有效(<code>diff</code>)的更新<code>DOM</code>.(例如：向用户添加列表中添加一个用户，只添加新的内容，原有的结构会被重用)</p></li></ul><p>虽然在使用<code>jquery</code>时代这种方式是可行的，我们点击按钮，它就可以从小到大的排序，但是它比较暴力，它会将之前的<code>dom</code>全部删除，然后重新渲染新的<code>dom</code>节点，我们知道，操作<code>DOM</code>会影响页面的性能，并且有时候数据根本就没有发生改变，我们希望未更改的数据不需要重新渲染操作。</p><p style="color:rgb(100, 181, 135);font-weight:600;">因此虚拟 DOM 的思想就出来了，就是先控制数据再到视图，但是数据状态是通过 diff 比对，它会比对新旧虚拟 DOM 节点，然后找出两者之前的不同，然后再把不同的节点再发生渲染操作。</p><img src="'+o+'" style="zoom:35%;"><h2 id="虚拟-dom-怎样为转换真实-dom" tabindex="-1">虚拟 DOM 怎样为转换真实 DOM <a class="header-anchor" href="#虚拟-dom-怎样为转换真实-dom" aria-hidden="true">#</a></h2><p>首先，在一个组件实例首次被渲染时，首先会生成虚拟 dom 树，然后根据根据虚拟 dom 树创建真实 dom，并把真实 dom 挂载到页面中合适的位置，此时，每个虚拟 dom 便会对应一个真实的 dom。这时候虚拟 dom 多一个创建虚拟 dom 树的过程，所以效率比真实 dom 低。</p><blockquote><p>这就是我们常问，使用虚拟 dom 一定性能更好、速度更快吗？</p></blockquote><p>当组件收到了响应式数据变化的影响时，就会重新渲染，此时会调用<code>render</code>方法，通过<code>render</code>方法中的<code>h</code>函数来，创建新的虚拟 dom 树，然后将新 VNode tree 与 旧 VNode tree 进行 diff 算法对比，通过对比 vue 会找到最小更新差异量，然后更新必要的 虚拟 dom 节点。最后这些更新过的<code>虚拟 dom 节点</code>，会去修改他们对应的<code>真实 dom 节点</code>。 <img src="'+p+`"></p><p>组件实例首次被渲染时，首先会生成虚拟 dom 树中，最后虚拟 dom 树会生成真实的 DOM 树，这个过程叫 <strong>渲染</strong>。当数据发生变化时，Vue 会先生成新的虚拟 DOM 树，然后通过比较新旧虚拟 DOM 树的差异来找出需要更新的部分,从而将虚拟 DOM 的变更操作转换为真实 DOM 的变更操作。</p><h2 id="模版和虚拟-dom-的关系" tabindex="-1">模版和虚拟 dom 的关系 <a class="header-anchor" href="#模版和虚拟-dom-的关系" aria-hidden="true">#</a></h2><p><code>vue</code> 框架中有一个<code>compile模块</code>，它主要负责将模板(实际上是字符串)转换为<code>render函数</code>，而<code>render函数</code>调用后将得到<code>虚拟 dom</code>。在这里我借鉴了很多大佬的意思加上我自己理解，大概说一下吧。</p><p>主要的流程刚才已经说了。首先要先获取模版</p><h3 id="获取模版" tabindex="-1">获取模版 <a class="header-anchor" href="#获取模版" aria-hidden="true">#</a></h3><p><code>Vue</code>会根据传入的<code>options</code>，然后判断获取<code>template</code>。首先要判断，<code>options</code>中无<code>render</code>函数，正常的顺序就是获取到<code>template</code>之后，调用<code>compileToFunctions</code>函数传参 template 来获取<code>render函数</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这里截取一段源码给大家看看</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/src/platforms/web/entry-runtime-with-compiler.js</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">query</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//省略。。。。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// resolve template/el and convert to render function</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">idToTemplate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nodeType</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//省略</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getOuterHTML</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">template</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//根据template获取render函数。</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">staticRenderFns</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">compileToFunctions</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//省略</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">      )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mount</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hydrating</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getOuterHTML</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">outerHTML</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">outerHTML</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="编译模版" tabindex="-1">编译模版 <a class="header-anchor" href="#编译模版" aria-hidden="true">#</a></h3><p>从 template 到 render 的过程中，首先要将 template 解析成 AST 树，这里的源码很复杂。给大家说一下过程就是调用<code>parse</code>方法将 <code>template</code> 转化为 <code>ast</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">constast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">AST 是什么？</p><p>使用 js 树形结构描述原始代码</p></div><p>编译的过程：</p><ul><li>如果使用传统的引入方式(script 的 src)，则编译时间发生在组件第一次加载时，这称之为运行时编译。</li><li>如果是在<code>vue-cli</code>的默认配置下，编译发生在打包时，这称之为模板预编译。（打包的时候编译完成</li><li>编译是一个极其耗费性能的操作，预编译可以有效的提高运行时的性能，而且，由于运行的时候已不需要编译，<code>vue-cli</code>在打包时会排除掉 vue 中的<code>compile</code>模块，以减少打包体积</li></ul><p>刚刚提到的模版预编译就是在<code>vue-cli</code>进行打包时，会直接把组件中的模板转换为<code>render</code>函数。这样做是有好处的：</p><ul><li>运行时就不再需要编译模板了，提高了运行效率</li><li>打包结果中不再需要 vue 的编译代码，减少了打包体积</li></ul><blockquote><p>感兴趣的同学可以看看前面给大家截取的源码片段，可以看到优先级是 render -&gt; template -&gt; ast 的。这样做就是为了在 vue 中，如果有模板和 render，则 render 优先。当然在<code>vue-cli</code>打包存在预编译，发现有模板，会覆盖 render。这两点不要搞混哈。</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//vue config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">runtimeCompiler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//打包的时候要不要包含运行时候编译，默认false，不建议使用true</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><blockquote><p>模板的存在，仅仅是为了让开发人员更加方便的书写界面代码。<br> vue 最终运行的时候，最终需要的是 render 函数，而不是模板，因此，模板中的各种语法，在虚拟 dom 中都是不存在的，它们都会变成虚拟 dom 的配置</p></blockquote>`,31),c=[t];function r(F,y,D,i,d,A){return n(),a("div",null,c)}const u=s(e,[["render",r]]);export{m as __pageData,u as default};
